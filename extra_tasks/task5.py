"""
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é safe_divide(a, b), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–≤–∞ —á–∏—Å–ª–∞ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—ñ–ª–µ–Ω–Ω—è a / b.
–Ø–∫—â–æ –¥—ñ–ª—å–Ω–∏–∫ (b) –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ —Ä—è–¥–æ–∫ "–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –Ω–µ–º–æ–∂–ª–∏–≤–µ".
"""
# def safe_divide(a, b):
#     try:
#         return a / b
#     except ZeroDivisionError:
#         return "–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –Ω–µ–º–æ–∂–ª–∏–≤–µ"
#
# safe_divide(10, 2) # ‚Üí 5.0
# safe_divide(5, 0) # ‚Üí "–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –Ω–µ–º–æ–∂–ª–∏–≤–µ"
#
# assert safe_divide(6, 2) == 3.0
# assert safe_divide(1, 0) == "–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å –Ω–µ–º–æ–∂–ª–∏–≤–µ"

"""
–ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞:

–ó–∞–ø–∏—Ç—É—î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–≤–∞ —á–∏—Å–ª–∞ (input()).
–ü—Ä–æ–±—É—î —ó—Ö –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ float.
–ü–∏—Ç–∞—î, —è–∫—É –æ–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞—Ç–∏ (+, -, *, /).
–í–∏–∫–æ–Ω—É—î –æ–ø–µ—Ä–∞—Ü—ñ—é —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

üî∏ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–µ —á–∏—Å–ª–æ ‚Äî –≤–∏–≤–µ–¥–∏ "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!"
üî∏ –Ø–∫—â–æ –ø—Ä–∏ –¥—ñ–ª–µ–Ω–Ω—ñ –¥—ñ–ª—å–Ω–∏–∫ = 0 ‚Äî –≤–∏–≤–µ–¥–∏ "–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å!"
üî∏ –Ø–∫—â–æ –æ–ø–µ—Ä–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è ‚Äî –≤–∏–≤–µ–¥–∏ "–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!"
–î–æ–¥–∞—Ç–∫–æ–≤–æ: –∑–∞—Ü–∏–∫–ª–∏—Ç–∏, –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
"""
unfinished = True

while unfinished:
    unfinished = False
    try:
        first_number = float(input("–í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–µ —á–∏—Å–ª–æ: "))
        second_number = float(input("–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–µ —á–∏—Å–ª–æ: "))
        user_operator = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é (+, -, *, /): ")

        match user_operator:
            case "+":
                result = first_number + second_number
            case "-":
                result = first_number - second_number
            case "*":
                result = first_number * second_number
            case "/":
                result = first_number / second_number
            case _:
                print("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è!")
                continue

        if not unfinished:
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)

    except ValueError:
        print("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")
        unfinished = True

    except ZeroDivisionError:
        print("–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å!")
        unfinished = True
